# -*- coding: utf-8 -*-
"""EDA_stock.ipynb

Automatically generated by Colab.
"""


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import yfinance as yf
from statsmodels.tsa.stattools import adfuller

plt.style.use("seaborn-v0_8")

# 2. Load Data
# Fetch live data with yfinance
df = yf.download("AAPL", start="2018-01-01", end="2023-12-31")

# Preview dataset
df.head()

# 3. Data Overview

print("Shape of dataset:", df.shape)
print("\nMissing values:\n", df.isnull().sum())
print("\nSummary statistics:\n", df.describe())

# Check for duplicate rows
print("\nDuplicates:", df.duplicated().sum())

# 4. Visualization - Price Trends

plt.figure(figsize=(12,6))
plt.plot(df['Close'], label="Close Price")
plt.title("AAPL Closing Price (2018-2023)")
plt.xlabel("Date")
plt.ylabel("Price (USD)")
plt.legend()
plt.show()

# 5. Moving Averages

df['MA50'] = df['Close'].rolling(window=50).mean()
df['MA200'] = df['Close'].rolling(window=200).mean()

plt.figure(figsize=(12,6))
plt.plot(df['Close'], label="Close")
plt.plot(df['MA50'], label="50-Day MA")
plt.plot(df['MA200'], label="200-Day MA")
plt.title("Moving Averages - AAPL")
plt.legend()
plt.show()

# 6. Daily Returns
df['Daily Return'] = df['Close'].pct_change()

plt.figure(figsize=(10,4))
df['Daily Return'].hist(bins=50, alpha=0.7)
plt.title("Histogram of Daily Returns")
plt.show()

print("Mean Daily Return:", df['Daily Return'].mean())
print("Std Dev of Daily Return:", df['Daily Return'].std())

# 7. Correlation Heatmap (OHLC)

plt.figure(figsize=(8,6))
sns.heatmap(df[['Open','High','Low','Close','Volume']].corr(), annot=True, cmap="coolwarm")
plt.title("Feature Correlation Heatmap")
plt.show()

# 8. Stationarity Check (ADF Test)

result = adfuller(df['Close'].dropna())

print("ADF Statistic:", result[0])
print("p-value:", result[1])

if result[1] < 0.05:
    print("The series is stationary (good for ARIMA)")
else:
    print("The series is non-stationary (differencing required)")

# 9. Volatility (Rolling Std)

df['Volatility'] = df['Daily Return'].rolling(window=30).std()

plt.figure(figsize=(12,6))
plt.plot(df['Volatility'], label="30-Day Rolling Volatility")
plt.title("Stock Volatility (AAPL)")
plt.legend()
plt.show()

